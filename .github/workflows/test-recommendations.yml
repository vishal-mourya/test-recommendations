name: Test Recommendations

on:
  pull_request:
    types: [opened, synchronize]
  pull_request_target:
    types: [opened, synchronize]

jobs:
  recommend-tests:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      - name: Generate Mock Test Recommendations
        run: |
          node scripts/mock-recommend-tests.js
          echo "Content of test-recommendations.json:"
          cat test-recommendations.json
      - name: Update PR Description
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs');
            try {
              console.log('Event name:', context.eventName);
              console.log('Action:', context.action);
              console.log('Ref:', context.ref);
              console.log('SHA:', context.sha);
              console.log('Repository:', context.repo.owner + '/' + context.repo.name);
              console.log('Pull Request number:', context.issue.number);
              
              const recommendations = JSON.parse(fs.readFileSync('test-recommendations.json', 'utf8'));
              console.log('Parsed recommendations:', recommendations);
              const checkboxes = recommendations.map(test => `- [ ] ${test}`).join('\n');
              
              const pr = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.name,
                pull_number: context.issue.number,
              });
              
              console.log('Existing PR body:', pr.data.body);
              
              const currentBody = pr.data.body || '';
              const newBody = `## Recommended Tests\n${checkboxes}\n\n${currentBody}`;
              
              console.log('New PR body:', newBody);
              
              const updateResult = await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.name,
                pull_number: context.issue.number,
                body: newBody
              });
              
              console.log('PR update result:', updateResult);
              console.log('PR description updated successfully');
            } catch (error) {
              console.error('Error updating PR description:', error);
              console.error('Error details:', error.message);
              console.error('Error stack:', error.stack);
              core.setFailed(`Action failed with error: ${error}`);
            }